import json
import datetime
import os
import requests
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
import io
import time
import matplotlib.dates as mdates
from datetime import datetime
import telebot
from telebot import types

BOT_TOKEN = "7659905271:AAFq8q30_9rPAopf_dteVqH07ctDGqijSNY"
CHAT_ID = "1056357383"

SYMBOLS = {
    "Bitcoin": "BTCUSDT",
    "Ethereum": "ETHUSDT",
    "TON": "TONUSDT",
    "SOL": "SOLUSDT"
    "XRP": "XRPUSDT"	
  
}
INTERVALS = {
    "15 –º–∏–Ω—É—Ç": "15",
    "30 –º–∏–Ω—É—Ç": "30",
    "1 —á–∞—Å": "60",
    "4 —á–∞—Å–∞": "240".	
    
}
LIMIT = 500

bot = telebot.TeleBot(BOT_TOKEN)
user_state = {}

def exponential_moving_average(data, period):
    return pd.Series(data).ewm(span=period, 
    adjust=False).mean()

def compute_rsi(prices, period=14):
    delta = prices.diff()
    gain = delta.where(delta > 0, 0.0)
    loss = -delta.where(delta < 0, 0.0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi
def compute_macd(prices):
    ema12 = exponential_moving_average(prices, 12)
    ema26 = exponential_moving_average(prices, 26)
    macd_line = ema12 - ema26
    signal_line = exponential_moving_average(macd_line, 9)
    return macd_line, signal_line

def build_candle_chart(df, symbol):
    from mplfinance.original_flavor import candlestick_ohlc
    df['date'] = mdates.date2num(df['timestamp'])
    ohlc = df[['date', 'open', 'high', 'low', 'close']]

    plt.figure(figsize=(10, 5))
    ax = plt.subplot()
    candlestick_ohlc(ax, ohlc.values, width=0.01, colorup='green', colordown='red')

    ax.plot(df['date'], df['ema14'], label='EMA-14')
    ax.plot(df['date'], df['ema50'], label='EMA-50')

    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d %H:%M'))
    plt.title(f"–°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ {symbol}")
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("–¶–µ–Ω–∞ USDT")
    plt.grid()
    plt.legend()
    plt.tight_layout()
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    plt.close()
    plt.clf()
    plt.cla()
    buf.seek(0)
    return buf

def get_candles(symbol, interval):
    url = f"https://api.bybit.com/v5/market/kline?category=spot&symbol={symbol}&interval={interval}&limit={LIMIT}"
    response = requests.get(url)
    data = response.json()
    candles = data["result"]["list"]
    df = pd.DataFrame(candles, columns=[
        "timestamp", "open", "high", "low", "close", "volume", "turnover"
    ])
    df["timestamp"] = pd.to_datetime(df["timestamp"].astype(int), unit='ms')
    df[["open", "high", "low", "close"]] = df[["open", "high", "low", "close"]].astype(float)
    return df

def get_live_price(symbol):
    url = f"https://api.bybit.com/v5/market/tickers?category=spot&symbol={symbol}"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        return float(data["result"]["list"][0]["lastPrice"])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è live-—Ü–µ–Ω—ã: {e}")
        return None

def send_crypto_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in SYMBOLS:
        markup.add(types.KeyboardButton(name))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=markup)

def log_request_entry(user_id, username, symbol_code, interval_code):
    stats_file = "user_requests.json"
    request = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "user_id": user_id,
        "username": username,
        "symbol": symbol_code,
        "interval": interval_code
    }

    try:
        with open(stats_file, "a") as f:  # —Ä–µ–∂–∏–º append
            f.write(json.dumps(request) + "\n")  # –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")
def analyze_and_send(chat_id, symbol_name, symbol_code, interval_code):
    try:
        bot.send_message(chat_id, f"üîç –ê–Ω–∞–ª–∏–∑ {symbol_code} –Ω–∞—á–∞–ª—Å—è...")
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                df = get_candles(symbol_code, interval_code)
                df = df[::-1]
                closes = df["close"]
                df["ema14"] = exponential_moving_average(closes, 14)
                df["ema50"] = exponential_moving_average(closes, 50)
                ema14 = df["ema14"].iloc[-1]
                ema50 = df["ema50"].iloc[-1]
                # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è EMA-14 –∏ EMA-50
                df["ema_cross"] = df["ema14"] > df["ema50"]
                df["cross_change"] = df["ema_cross"] != df["ema_cross"].shift()

                last_cross_row = df[df["cross_change"]].iloc[-1] if df["cross_change"].any() else None

               
                   
                   
# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                
                rsi = compute_rsi(closes)
                macd, signal = compute_macd(closes)
                break  # –£—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            except Exception as e:
                if attempt < max_attempts - 1:
                    print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}). –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
                    bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–∞ —Å–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º (Bybit/Telegram). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                    send_crypto_menu(chat_id)
                    return
      
        # üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
        if len(macd) == 0 or len(signal) == 0:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ MACD.")
            send_crypto_menu(chat_id)
            return
        macd_val, signal_val = macd.iloc[-1], signal.iloc[-1]
        price = get_live_price(symbol_code) or closes.iloc[-1]

        trend = "‚¨ÜÔ∏è –õ–æ–Ω–≥" if ema14 > ema50 else "‚¨áÔ∏è –®–æ—Ä—Ç"
        direction = "–±—ã—á–∏–π" if macd_val > signal_val else "–º–µ–¥–≤–µ–∂–∏–π"
        # –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
        strong_signal = False
        if trend == "üìà –õ–æ–Ω–≥" and direction == "–±—ã—á–∏–π" and rsi.iloc[-1] < 70:
            strong_signal = True
        elif trend == "üìâ –®–æ—Ä—Ç" and direction == "–º–µ–¥–≤–µ–∂–∏–π" and rsi.iloc[-1] > 30:
            strong_signal = True
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–µ–∫—Å—Ç –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞
        signal_strength = "‚úÖ –ù–∞–¥—ë–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª" if strong_signal else "‚ö†Ô∏è –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª ‚Äî –Ω—É–∂–Ω–∞ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å"
        if ema14 > ema50:
            # –õ–æ–Ω–≥: TP –≤—ã—à–µ, SL –Ω–∏–∂–µ
            take_profit = price * 1.005
            stop_loss = price * 0.995
        else:
            # –®–æ—Ä—Ç: TP –Ω–∏–∂–µ, SL –≤—ã—à–µ
            take_profit = price * 0.995
            stop_loss = price * 1.005
        try:
            if last_cross_row is not None:
                       cross_type = "üìà Golden Cross" if last_cross_row["ema14"] > last_cross_row["ema50"] else "üìâ Death Cross"
                       cross_msg = (
                       "üìä –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA:\n"
                       f"üîπ –¢–∏–ø: {cross_type}\n"
                       f"üí∞ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {last_cross_row['close']:.2f} USDT\n"
                       f"üïí –í—Ä–µ–º—è: {last_cross_row['timestamp']}\n\n"
                       f"üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:\n"
                       f"üîπ RSI: {rsi.iloc[-1]:.2f}\n"
                       f"üîπ EMA-14: {ema14:.5f}\n"
                       f"üîπ EMA-50: {ema50:.5f}\n"
                       f"üîπ MACD –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
                       f"üîπ MACD –∑–Ω–∞—á–µ–Ω–∏–µ: {macd_val:.5f}\n"
                       f"üîπ –°–∏–≥–Ω–∞–ª MACD: {signal_val:.5f}"

                       )
                       
            else:
                       cross_msg = "‚ùî –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
                   
        except Exception as e:
                   cross_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è EMA:\n{e}"
        buf = io.BytesIO()
        

        from mplfinance.original_flavor import candlestick_ohlc
        df['date'] = mdates.date2num(df['timestamp'])
        ohlc = df[['date', 'open', 'high', 'low', 'close']]
        plt.figure(figsize=(10, 5))
        ax = plt.subplot()
        candlestick_ohlc(ax, ohlc.values, width=0.01, colorup='green', colordown='red')
        ax.plot(df['date'], df['ema14'], label='EMA-14')
        ax.plot(df['date'], df['ema50'], label='EMA-50')
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d %H:%M'))
        plt.title(f"–°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ {symbol_code}")
        plt.xlabel("–í—Ä–µ–º—è")
        plt.ylabel("–¶–µ–Ω–∞ USDT")
        plt.grid()
        plt.legend()
        plt.tight_layout()
        plt.savefig(buf, format='png')
        plt.close()
        buf.seek(0)

        bot.send_photo(chat_id, buf, caption=f"üìâ –°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ {symbol_code}")
        bot.send_message(chat_id, cross_msg)
        trend_emoji = "üìà" if trend == "–õ–æ–Ω–≥" else "üìâ"
        analysis_msg = (
        f"üìä –ê–Ω–∞–ª–∏–∑ {symbol_code} ‚Äì {trend_emoji} {trend}\n"
        f"üéØ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {price:.5f} USDT\n\n"
    	f"üìå Take-profit: {take_profit:.5f} USDT\n"
    	f"üõë Stop-loss: {'–≤—ã—à–µ' if trend == '–®–æ—Ä—Ç' else '–Ω–∏–∂–µ'} {stop_loss:.5f} USDT\n\n"

    	f"{signal_strength}"
	)
        bot.send_message(chat_id, analysis_msg)
        send_crypto_menu(chat_id,)
    except Exception as e:
        import traceback
        err_msg = traceback.format_exc()
        print(err_msg)  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:\n{err_msg}")

        send_crypto_menu(chat_id)

    

@bot.message_handler(commands=["start"])
def start(message):
    send_crypto_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text in SYMBOLS)
def choose_symbol(message):
    user_state[message.chat.id] = {"symbol": message.text}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for interval in INTERVALS:
        markup.add(types.KeyboardButton(interval))
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in INTERVALS)
def choose_interval(message):
    chat_id = message.chat.id
    interval = INTERVALS[message.text]
    symbol_name = user_state.get(chat_id, {}).get("symbol")
    if not symbol_name:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    symbol_code = SYMBOLS[symbol_name]

    log_request_entry(
        user_id=chat_id,
        username=message.from_user.username or  
    "unknown",
        symbol_code=symbol_code,
        interval_code=interval
    )

    analyze_and_send(chat_id, symbol_name, symbol_code, interval)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã /start...")

    while True:
        try:
            bot.infinity_polling(timeout=60, long_polling_timeout=30)
        except Exception as e:
            print(f"[–û–®–ò–ë–ö–ê poll]: {e}")
            import traceback
            traceback.print_exc()

            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            try:
                bot.send_message(CHAT_ID, "‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–∞ —Å–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º (Bybit/Telegram). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            except:
                print("‚ùóÔ∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –±–æ—Ç —Å–∞–º –æ—Ç–∫–ª—é—á—ë–Ω.")

            print("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
